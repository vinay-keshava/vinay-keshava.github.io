{"/about/":{"data":{"":" Hello, I\u0026rsquo;m Vinay a FOSS enthusiast and a undergraduate, currently Intern\u0026rsquo;ing at Deeproot GNU/Linux.\nI\u0026rsquo;m a Debian Maintainer,maintaining \u0026amp; working on ruby and golang packages of GitLab and its components on Debian.\nPlease feel free to hit me up if you want to get in contact or want to know about me. I go by the handle vinay-keshava across the web.\nEmail/XMPP: vinaykeshava [AT] disroot.org\n"},"title":"About"},"/blog/":{"data":{"":" Mapping of Physical USB ports to device filename on GNU/Linux Debian Maintainer Now!! Contributing to Debian !! Software Freedom Camp 2021 git.fosscommunity.in Server Update "},"title":"Blog Post's"},"/docs/":{"data":{"":"I try to hack around a lot of stuff,but lazy to document, but trying to document \u0026rsquo;em all\n"},"title":"Documentation"},"/docs/interception-vimproved/":{"data":{"":"","#":"Setting up Interception Vimproved on Debian Bookworm I started learning vim few months ago and wanted to try vim key bindings like shortcuts on my laptop after trying a mechanical hackable keyboard.\nInterception Vimproved is a plugin for interception-tools which combines both caps2esc and space on hold work as special fn key. This blog post shows how to setup interception-vimproved using interception-tools on Debian Bookworm.\nStep 1: Dependencies Installing Dependencies to build interception-vimproved on Debian Bookworm GNU/Linux\n$ sudo apt install interception-tools meson libyaml-cpp-dev cmake interception-tools is a small set of tools for input events of devices,that can be used to customize the behaviour of input keyboard mappings.\nThe advantage of interception-tools operates at lower level compared to xmodmap by using libevdev and libudev.\nStep 2: Clone \u0026amp; Build Clone interception-vimproved repository and build\n$ git clone \u0026#34;https://github.com/maricn/interception-vimproved\u0026#34; $ cd interception-vimproved $ sudo make install Clone the git repository and change the directory, and then launch a make install command to build.\nStep 3: Configuration Create a new file called udevmon.yaml in /etc/interception and paste the following contents into the file /etc/interception/udevmon.yaml\n- JOB: \u0026#34;interception -g $DEVNODE | interception-vimproved /etc/interception-vimproved/config.yaml | uinput -d $DEVNODE\u0026#34; DEVICE: NAME: \u0026#34;.*((k|K)(eyboard|EYBOARD)).*\u0026#34; udevmon.yaml is like a job specification for udevmon,specifying that it matches with (k|K)(eyboard|EYBOARD)) input device.\nℹ️ I haven\u0026rsquo;t tested this for an External Keyboard Input device,but works fine for the built-in keyboard of the laptop. Step 4: Reload udevmon Reload udevmon using systemctl\n$ sudo systemctl restart udevmon Hack around the config To change any keybindings or to add new mappings the config file is present in config.yaml located in /etc/interception-vimproved/ when a sudo make install is launched the config file is copied to /etc/interception-vimproved/config.yaml.\nmy config.yaml has the below shortcuts\n/etc/interception-vimproved/config.yaml- intercept: KEY_CAPSLOCK ontap: KEY_ESC onhold: KEY_LEFTCTRL - intercept: KEY_ENTER # not necessary: ontap: KEY_ENTER is inferred if left empty onhold: KEY_RIGHTCTRL # this is a layer. hold space (onhold) contains several remappings - intercept: KEY_SPACE onhold: # special chars - from: KEY_E to: KEY_ESC # alternative syntax - {from: KEY_D, to: KEY_DELETE} - {from: KEY_B, to: KEY_BACKSPACE} # vim home row - {from: KEY_H, to: KEY_LEFT} - {from: KEY_J, to: KEY_DOWN} - {from: KEY_K, to: KEY_UP} - {from: KEY_L, to: KEY_RIGHT} # vim above home row - {from: KEY_Y, to: KEY_HOME} - {from: KEY_U, to: KEY_PAGEDOWN} - {from: KEY_I, to: KEY_PAGEUP} - {from: KEY_O, to: KEY_END} # number row, to F keys - {from: KEY_1, to: KEY_F1} - {from: KEY_2, to: KEY_F2} - {from: KEY_3, to: KEY_F3} - {from: KEY_4, to: KEY_F4} - {from: KEY_5, to: KEY_F5} - {from: KEY_6, to: KEY_F6} - {from: KEY_7, to: KEY_F7} - {from: KEY_8, to: KEY_F8} - {from: KEY_9, to: KEY_F9} - {from: KEY_0, to: KEY_F10} - {from: KEY_MINUS, to: KEY_F11} - {from: KEY_EQUAL, to: KEY_F12} # xf86 audio - {from: KEY_M, to: KEY_MUTE} - {from: KEY_COMMA, to: KEY_VOLUMEDOWN} - {from: KEY_DOT, to: KEY_VOLUMEUP} # mouse navigation - {from: BTN_LEFT, to: BTN_BACK} - {from: BTN_RIGHT, to: BTN_FORWARD} Interception-tools is packaged on debian,interception-vimproved is not, that is the reason we are building the source of interception-vimproved,hopefully i\u0026rsquo;ll try packaging it !.\nArch has interception-tools already packaged here is the link\n:wq #until next time "},"title":"Interception Vimproved"},"/docs/selfhosting/":{"data":{"":"Self Hosting\n"},"title":"Self Hosting"},"/docs/selfhosting/nextcloud/":{"data":{"":"Coming Soon.\n"},"title":"NextCloud"},"/posts/contributing-to-debian/":{"data":{"debian#Debian":"DebianDebian is a GNU/Linux distribution completely inclinded towards Free Software philosophy, maintained by the community.\nBefore talking about how i started contributing to debian, i would like to talk about the camp organized by FSCI It is an online free mentorship programme organized by Free Software Community of India ,introducing people to Free Software.Ravish introduced me to 2021 FSCI\u0026rsquo;s camp, and there i got introduced to Debian Packaging through Debian Developers and Debian Maintainers.\nDuring the project phase of the camp, i choosed to work on Debian Packaging and System Administration(here is my Project Proposal)\n","debian-packages-and-my-story-#Debian Packages and my Story !!":"Debian has roughly over 51,000 packages, these packages are installable through apt, just like \u0026ldquo;sudo apt install nano\u0026rdquo;. I always wanted to know how \u0026ldquo;sudo apt install nano\u0026rdquo; works !.\nDuring the project phase of the camp Praveen my mentor of the project,a Debian Developer himself suggested to get started by packaging node packages(dependencies of Gitlab). A big Thanks to praveen for teaching packaging from scratch, also answering my useless questions and also sponsoring my packages to debian. Initially i found it very difficult to understand it,but the community was so welcoming, they were helping and assisting me by clearing all my doubts through matrix.\nI took a lot of time to learn,tried to spend more time in learning during hectic schedule of college and also i gave up hope many times and restarted it. So initial task was to setup the Debian Unstable environment and rebuilding the existing simple node-pretty-ms package, and then tried a simple package update and then went to continue packaging few node modules.\nI currently maintain around two node modules as of today, looking forward to maintain more packages in debian. All the communication happens mainly through mailing list or irc of respective teams.\n","further-development#Further Development":"Looking forward to contribute and hangout with the awesome debian community and learn more.\n:wq "},"title":"Contributing to Debian"},"/posts/debian-maintainer/":{"data":{"":"I am excited to share with you all that I have recently become a Debian maintainer!! Thanks to amazing debian community.\nIt all started with Software Freedom Camp, ravish my college super senior (we were a part of college linux club) introduced me to software freedom camp organized by FSCI, since then i was a noob hopping between various distro\u0026rsquo;s from kali linux to other debian based distros to arch ! I had previously written my experience of attending software freedom camp here.\nI started with packaging node modules initially without any knowledge of javascript/nodejs, before packaging new module i tried to upgrade few node packages to new upstream,it was difficult at first understanding the packaging process. node-prosemirror-view was the first node module i packaged, cut to 20'23, i maintain few ruby and golang packages most of them which are gitlab dependencies, here is the list of packages i maintain.Special thanks to praveen for his mentoring, who is my package sponsorer.\nOver the past six months, I have been packaging Ruby gems and GitLab dependencies. For this gitlab update, I took on the challenge of building GitLab 15.8.4 and its major components, including Gitlay and GitLab-shell.\nThanks to Praveen and Bilal for their help and support during gitlab package upgrade to 15.8.4.\nThe first package as DM uploaded was ruby-et-orbi.\nWe are also preparing GitLab for bookworm, the next release of Debian.\n"},"title":"Debian Maintainer Now !!!!"},"/posts/git-fosscommunity-in-update/":{"data":{"":"Ahh, my first blog post. Good Beginnings (:\nExcited!!\nThis blog post is dedicated to sharing my experience with updating the FSCI’s GitLab instance git.fosscommunity.in update.\nFSCI runs a free instance of GitLab Community Edition at git.fosscommunity.in for collaborative software development.\nFSCI also hosts and maintains a lot of services for the community, you can check out the services here, these services are managed by volunteers.\nAfter joining Software Freedom Camp 2021 Diversity Edition( Online mentorship programme organized by Free Software Community of India(FSCI) ) as a learner and I met a bunch of people who discuss about Free/Libre/Open Source Software and educate people about why it is important to use free software in our life maintaining freedom and privacy in this era of technology. Along with Ravish and Sahilister we all updated it from GitLab v14.4.2 to Gitlab v14.4.4 it was a Security update, it took a lot of my time to update and upgrade the instance.\nAll thanks to Ravish and Sahilister for helping and teaching me.\n"},"title":"git.fosscommunity.in Server Update"},"/posts/mapping-of-physical-usb-ports-to-device-names/":{"data":{"":"","how-to-map-physical-usb-ports-to-device-names-on-gnulinux#How to Map Physical USB ports to Device Names on GNU/Linux":"lsusb command$ lsusb Bus 002 Device 004: ID 04b3:3025 IBM Corp. NetVista Full Width Keyboard Bus 002 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub Bus 003 Device 123: ID 0951:1666 Kingston Technology DataTraveler 100 G3/G4/SE9 G2/50 Bus 003 Device 002: ID 2109:0815 VIA Labs, Inc. USB3.0 Hub $ lsusb -t /: Bus 06.Port 1: Dev 1, Class=root_hub, Driver=xhci_hcd/2p, 10000M |__ Port 2: Dev 2, If 0, Class=Hub, Driver=hub/7p, 5000M /: Bus 05.Port 1: Dev 1, Class=root_hub, Driver=ehci-pci/3p, 480M |__ Port 1: Dev 2, If 0, Class=Hub, Driver=hub/8p, 480M /: Bus 04.Port 1: Dev 1, Class=root_hub, Driver=xhci_hcd/2p, 480M /: Bus 03.Port 1: Dev 1, Class=root_hub, Driver=xhci_hcd/4p, 5000M |__ Port 4: Dev 2, If 0, Class=Hub, Driver=hub/4p, 5000M |__ Port 2: Dev 123, If 0, Class=Mass Storage, Driver=usb-storage, 5000M /: Bus 02.Port 1: Dev 1, Class=root_hub, Driver=ehci-pci/3p, 480M |__ Port 1: Dev 2, If 0, Class=Hub, Driver=hub/6p, 480M |__ Port 3: Dev 4, If 0, Class=Human Interface Device, Driver=usbhid, 1.5M /: Bus 01.Port 1: Dev 1, Class=root_hub, Driver=xhci_hcd/4p, 480M |__ Port 4: Dev 2, If 0, Class=Hub, Driver=hub/4p, 480M \u0026ldquo;lsusb\u0026rdquo; is a utility of \u0026ldquo;usbutils\u0026rdquo; in GNU/Linux to display information about the USB Buses and the USB\u0026rsquo;s attached to the buses.The output of the command displays the VendorID:ProductID and to which bus it is attached,the \u0026ldquo;Kingston Technology DataTraveler\u0026rdquo; bearing the VendorID:ProductID (0951:1666) attached to bus 003, the lsusb command with option \u0026ldquo;-t\u0026rdquo; provides a tree like output in a hierarchial structure.\n\u0026ldquo;lsblk\u0026rdquo; is a tree-like structure to identify devices and their partitions,and also displays device name (/dev/sd* if its a hard disk,/dev/nvme0n1 in case of SSD),size of the drive/partition, whether it is a disk/partition and the device\u0026rsquo;s mountpoints,here the /dev/sda* is the hard disk and sda1/2/5 are the partitions of the hard disk and /dev/sdb is the Kingston USB drive connected.\n$ lsblk NAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINTS sda 8:0 0 119.2G 0 disk ├─sda1 8:1 0 118.3G 0 part / ├─sda2 8:2 0 1K 0 part └─sda5 8:5 0 976M 0 part [SWAP] sdb 8:16 1 28.9G 0 disk sr0 11:0 1 1024M 0 rom ","suppose-if-there-are-multiple-usb-sticks-attached-to-mutiple-physical-usb-ports-how-to-know-which-device-names-is-mapped-to-which-usb-port-#Suppose if there are multiple USB sticks attached to mutiple physical USB ports how to know which device names is mapped to which USB port ?":"If there are multiple USB\u0026rsquo;s attached how do we get to know USB drive\u0026rsquo;s device file and to which port that USB is connected ?\nThe answer is by /dev/disk/* Everything in GNU/Linux is either a file or a directory,so even the disk are represented as files in GNU/Linux.\n$ ls -ltrh /dev/disk/ total 0 drwxr-xr-x 2 root root 100 Aug 28 12:28 by-partuuid drwxr-xr-x 2 root root 100 Aug 29 09:49 by-uuid drwxr-xr-x 2 root root 260 Aug 29 09:49 by-path drwxr-xr-x 2 root root 60 Aug 29 09:49 by-label drwxr-xr-x 2 root root 160 Aug 29 09:49 by-id drwxr-xr-x 2 root root 260 Aug 29 09:49 by-diskseq The USB disks can be identified by the Partition UUID, UUID of the disk, by path, by label of the disk and also by disk sequence.\nBy UUID(Universally Unique Identifier) by uuid$ cat /etc/fstab UUID=3341b336-0c26-4079-b3aa-faca8e2dd8b6 / ext4 errors=remount-ro 0 1 UUID=53b53d97-b5e4-43fe-b560-2a01f119b6cf none swap sw 0 0 /dev/sr0 /media/cdrom0 udf,iso9660 user,noauto 0 0 $ ls -ltrh /dev/disk/by-uuid/ total 0 lrwxrwxrwx 1 root root 10 Aug 22 10:40 3341b336-0c26-4079-b3aa-faca8e2dd8b6 -\u0026gt; ../../sda1 lrwxrwxrwx 1 root root 10 Aug 22 10:40 53b53d97-b5e4-43fe-b560-2a01f119b6cf -\u0026gt; ../../sda5 lrwxrwxrwx 1 root root 9 Aug 29 09:49 2010-10-06-11-43-04-00 -\u0026gt; ../../sdb The device /dev/disk/by-uuid/3341b336-0c26-4079-b3aa-faca8e2dd8b6 is simply a symbolic link to actual an device,the reason being this is device name may change depending whether disk is attached or not,whereas these links will point to the same drive,so henceforth safer to use.\nBy-Label by-label$ ls -ltrh /dev/disk/by-label/ total 0 lrwxrwxrwx 1 root root 9 Aug 29 09:49 VINAY-USB -\u0026gt; ../../sdb Labels are easy, it avoids confusion in identifying disk, instead of remembering /dev/sda device file names.\nBy-Path by-path$ ls -ltrh /dev/disk/by-path/ total 0 lrwxrwxrwx 1 root root 9 Aug 22 10:40 pci-0000:00:1f.2-ata-2.0 -\u0026gt; ../../sda lrwxrwxrwx 1 root root 9 Aug 22 10:40 pci-0000:00:1f.2-ata-2 -\u0026gt; ../../sda lrwxrwxrwx 1 root root 10 Aug 22 10:40 pci-0000:00:1f.2-ata-2-part2 -\u0026gt; ../../sda2 lrwxrwxrwx 1 root root 10 Aug 22 10:40 pci-0000:00:1f.2-ata-2.0-part2 -\u0026gt; ../../sda2 lrwxrwxrwx 1 root root 10 Aug 22 10:40 pci-0000:00:1f.2-ata-2-part1 -\u0026gt; ../../sda1 lrwxrwxrwx 1 root root 10 Aug 22 10:40 pci-0000:00:1f.2-ata-2.0-part1 -\u0026gt; ../../sda1 lrwxrwxrwx 1 root root 10 Aug 22 10:40 pci-0000:00:1f.2-ata-2-part5 -\u0026gt; ../../sda5 lrwxrwxrwx 1 root root 10 Aug 22 10:40 pci-0000:00:1f.2-ata-2.0-part5 -\u0026gt; ../../sda5 lrwxrwxrwx 1 root root 9 Aug 22 10:40 pci-0000:00:1f.2-ata-3.0 -\u0026gt; ../../sr0 lrwxrwxrwx 1 root root 9 Aug 22 10:40 pci-0000:00:1f.2-ata-3 -\u0026gt; ../../sr0 lrwxrwxrwx 1 root root 9 Aug 29 09:49 pci-0000:00:14.0-usb-0:4.2:1.0-scsi-0:0:0:0 -\u0026gt; ../../sdb Here /dev/sdb is the USB device attached and \u0026ldquo;pci-0000:00:14.0-usb-0:4.2:1.0-scsi-0:0:0:0\u0026rdquo; file which represents the USB device describes that the USB device is connected from PCI bus to SCSI adapter.\u0026ldquo;by-path\u0026rdquo; is the pci path of the disk device. this device file name is created depending on the shortest physical path to the device. \u0026ldquo;/dev/sda\u0026rdquo; the first SCSI drive on the first SCSI bus,/dev/sdb is the second SCSI drive and /dev/sdc is the third SCSI drive and so on.\n:wq "},"title":"Mapping of Physical USB ports to Device Name on GNU/Linux"},"/posts/software-freedom-camp-2021/":{"data":{"experience-of-running-snikket-server#Experience of Running Snikket Server":"Back to writing after a 2-month long Semester End Exam !!!!.\nEveryone uses messaging platforms like WhatsApp, Facebook, Signal, Telegram, and various other applications to communicate with people, in this blog post I would like to introduce to XMPP Protocol( Extensible Messaging and Presence Protocol), XMPP is an open, decentralized universal messaging standard for instant messaging, voice/video calls. Many Applications or Clients are built using the XMPP protocol due to its open nature. Platforms like WhatsApp, Telegram, Signal impose vendor lock-in wherein the user using the product or service cannot transit to the competitor’s product/service. To overcome vendor lock-in issues and privacy issues one of the minimal, simple best solutions is to set up a Snikket server of your own, where you can own your data.\nWhat is SnikketSnikket is a simple, customized messaging platform that is different from other messaging apps like Whatsapp, Telegram. Snikket is a decentralized messaging platform which means anyone can host their snikket server on their cloud, it allows everyone to host their server. Snikket is free software, a privacy-friendly messaging platform based on XMPP protocol, it can be self-hosted by anyone. Snikket provides an android application client to connect to any XMPP servers and using a snikket account you choose any XMPP clients if you want to connect using android applications like monocles chat, blabber, Snikket app other desktop clients recommended are dino-im and gajim.\nExperience of Running Snikket ServerSnikket is my first self-hosted service, before talking about the experience of running the snikket server I would like to talk about Software Freedom camp 2021 ,the camp is organized by the Free Software Community of India. As a part of the camp initially, learners were made to understand the philosophy and intention behind free software. Later during the project phase, learners were allowed to choose certain available topics proposed by the mentor. After joining the sfcamp as a learner, I choose to learn system administration and Debian packaging, under system administration one of the deliverables was to set up a Snikket server of my own.\nTo run any snikket server basic requirements are a domain name and a VPS (Virtual Private Server )to run your snikket server. I had signed up for the Github Student Developer pack through the pack got the free domain from name.com and I choose Amazon Web Services Free Tier as my VPS.\nSnikket is all about the DNS Docker Daemons Snikket also has an option of creating circles, limiting users to that circle only, although any user can talk to any individual by providing an XMPP or Snikket username. Snikket uses an invite-based procedure for account creation on the server. Only the admin can have the authority to create an invite link. Snikket also supports audio and video calls of great speed, these are some of the features of the snikket application. I have been using Snikket and invited most of my friends to my Snikket server. Initially, it took time to make them understand how it is completely different from other messaging platforms. Later educated them about how decentralization, vendor lock-in works and then introduced them to Snikket and other XMPP-based clients.\nThe learning while setting up the snikket server was got introduced to Docker Container, Domain Name System( DNS ), how server logs are checked, and debugging the errors.\n","guide-to-setup-snikket-server#Guide to Setup Snikket Server":"Here is the quickstart guide to setup the snikket server , this is the official guide by Snikket to setup the snikket server . The detailed documentation is here. Snikket requires few ports to be open for communication refer this which clearly mentions the firewall rules and ports required. Snikket Source code here.\nThanks to Ravish and Sahil for helping to set up the Snikket server.\nNext Goals - Reverse Proxy by Nginx . Bye for now .\n:wq ","what-is-snikket#What is Snikket":""},"title":"Software Freedom Camp 2021 Snikket"}}