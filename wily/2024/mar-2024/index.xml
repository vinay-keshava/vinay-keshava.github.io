<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Vinay Keshava â€“ March</title>
    <link>//localhost:1313/wily/2024/mar-2024/</link>
    <description>Recent content in March on Vinay Keshava</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    
	  <atom:link href="//localhost:1313/wily/2024/mar-2024/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>2024-03-05</title>
      <link>//localhost:1313/wily/2024/mar-2024/20240305/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/wily/2024/mar-2024/20240305/</guid>
      <description>
        
        
        &lt;ul&gt;
&lt;li&gt;Kafka Integration with Spring Boot&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Kafka is a distributed event store with stream processing message, handles low latency platforms for real time data feeds. Kafka allows users to subscribe and publish to the kafka broker.&lt;/p&gt;
&lt;p&gt;A general use case with different micro services: User,Account and SMS microservice&lt;/p&gt;
&lt;p&gt;Integration of the above microservices with Apache Kakfa messaging event.Below is the link for the detailed documentation and steps to integrate a spring boot project with kafka in a microservices architecture.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://gitlab.com/vinay-keshava/spring-boot-kafka&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Repository Link&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;//localhost:1313/docs/java/kafka&#34; &gt;Docs link&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Twilio SDK Integration&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Twilio Integration with Spring boot to send SMS through a Twilio trial account.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.twilio.com/en-us/blog/send-basic-sms-java-springboot&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Reference Link&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Using System Environment Variables in application.properties&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Usage of system environment variables in &lt;code&gt;application.properties&lt;/code&gt; for example, mysql username and password,url etc making confidential information secure.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>2024-03-06</title>
      <link>//localhost:1313/wily/2024/mar-2024/20240306/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/wily/2024/mar-2024/20240306/</guid>
      <description>
        
        
        &lt;ul&gt;
&lt;li&gt;.gitkeep&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;git only tracks files and not empty directories,for instead we want to create an empty directory in a project directory, instead of creating a dummy file, a standard practice is to create a &lt;code&gt;.gitkeep&lt;/code&gt; file within this empty directory.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;git stash&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;git stash is useful,when you want to switch to another branch, but there are few local changes in your current branch and you dont want to commit them,in this scenario &lt;code&gt;git stash&lt;/code&gt; can be used.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git stash apply&lt;/code&gt; - apply the stashed changes to the working project&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git stash pop&lt;/code&gt; - pop&amp;rsquo;s the changes and applies to working set.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>2024-03-12</title>
      <link>//localhost:1313/wily/2024/mar-2024/20240312/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/wily/2024/mar-2024/20240312/</guid>
      <description>
        
        
        &lt;h3&gt;Java 8 Features&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;java-8-features&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#java-8-features&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Functional Interfaces&lt;/p&gt;
&lt;p&gt;Functional Interfaces: Consumers, Suppliers, Predicate Functions&lt;/p&gt;
&lt;p&gt;Why functional interfaces?&lt;/p&gt;
&lt;p&gt;Lambda Expressions: Functional interfaces with lambda expressions&lt;/p&gt;
&lt;p&gt;Examples of consumers,predicates,functions and suppliers with syntax and constructors&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Lambda Expressions&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Stream API&lt;/p&gt;
&lt;p&gt;Difference between Sequence streams and Parallel streams.&lt;/p&gt;
&lt;p&gt;How Streams work internally?&lt;/p&gt;
&lt;p&gt;Intermediate operations, terminal operations, short circuit operations.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Method Reference&lt;/p&gt;
&lt;p&gt;Method reference in java,calling static methods,instantiated methods and so on.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;//localhost:1313/docs/java/java8&#34; &gt;Documentation Link&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>2024-03-13</title>
      <link>//localhost:1313/wily/2024/mar-2024/20240313/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/wily/2024/mar-2024/20240313/</guid>
      <description>
        
        
        &lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Reactive Programming&lt;/p&gt;
&lt;p&gt;Need for reactive programming&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;//localhost:1313/docs/java/webflux&#34; &gt;Reactive programming&lt;/a&gt; is a programming paradigm that promotes an asynchronous, non-blocking, event driven approach to data processing. Let us understand the difference between blocking and non blocking request processing.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Blocking Request Processing&lt;/li&gt;
&lt;li&gt;Non Blocking Request Processing&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Reactive Manifesto&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Back Pressure&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>2024-03-14</title>
      <link>//localhost:1313/wily/2024/mar-2024/20240314/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/wily/2024/mar-2024/20240314/</guid>
      <description>
        
        
        &lt;h3&gt;Openshift&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;openshift&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#openshift&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;a href=&#34;//localhost:1313/docs/openshift&#34; &gt;Redhat OpenShift&lt;/a&gt; is a platform that allows us to manage,deploy and orchestrate containerized applications in the cloud.Red hat openshift solves the biggest problem of developing and deploying microservice based applications.&lt;/p&gt;
&lt;p&gt;oc command lets you work with the entire OpenShift cluster and deploy new applications.The CLI exposes the underlying Kubernetes orchestration system with the enhancements made by OpenShift. Users familiar with Kubernetes will be able to adapt to OpenShift quickly.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;oc login -u admin -p admin https://api.crc.testing:6443 --insecure-skip-tls-verify=true&lt;/code&gt;
the command to login into openshift for the user (-u option) admin with password (-poption above)  admin
&lt;code&gt;oc whoami&lt;/code&gt; : displays the logged in openshift user.&lt;/p&gt;
&lt;h3&gt;Containers&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;containers&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#containers&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Getting started with &lt;a href=&#34;//localhost:1313/docs/containers&#34; &gt;containers&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Like a normal linux program,containers have two states - rest and running. When the container is at rest, a container is a like a file that is stored on the disk like other files.This is referred to as &lt;code&gt;Container Image&lt;/code&gt; or &lt;code&gt;Container Repository&lt;/code&gt;. When the container is started, the &lt;code&gt;Container Engine&lt;/code&gt; unpacks the required files and meta-data, then hands them to the linux kernel.The next process is to start the container just like another linux process making an API call to the linux kernel. This API call makes an isolation and mounts  a copy of the files stored in the container image.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Registry Server&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A container registry server is a tool which hosts and distributes container images. The container registry server can either be public or private.These container registries connect directly to container orchestration platforms like Docker and Kubernetes.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Container Image&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A container image, which is a file, pulled from the registry server and used locally as a mount point when the containers are started&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>2024-03-18</title>
      <link>//localhost:1313/wily/2024/mar-2024/20240318/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/wily/2024/mar-2024/20240318/</guid>
      <description>
        
        
        &lt;h3&gt;Containers&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;containers&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#containers&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;a href=&#34;//localhost:1313/docs/containers&#34; &gt;Containers&lt;/a&gt; have existed within operating systems for quite a long time, A Container is a runtime intiative of container image.
Linux containers are often isolated through the use of cgroups,SELinux,AppArmor.&lt;/p&gt;
&lt;p&gt;Overview of security like cgroups,AppArmor in Debian.&lt;/p&gt;
&lt;p&gt;Container Terminology:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- Registry Server: A container registry server is a tool which hosts and distributes container images. The container registry server can either be public or private.These container registries connect directly to container orchestration platforms like Docker and Kubernetes.

- Container image: A container image, which is a file, pulled from the registry server and used locally as a mount point when the containers are started.LXD pulls a single container image from the registry server,while docker uses OCI-based images which can be made of multiple layers.

- Container Engine: A container engine pulls the container image from the registry server,accepts user&#39;s requests via command line options and runs the container. There are many container engines like CRI-O, Docker, LXD.Most container engines do not run containers, they rely OCI compliant runtime like runc.

- Container Host: container host is the system that runs the containerized process(containers). For example a VM in a data center is a host, while containers can be run on them.

- Image,Tag: Images: Repositories are often reffered to as images or container images,but they are actually made up of one or more image layers.Image Layers are usually referenced by parent child relationship.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Tag: Defining versions for the container images with the help of tags.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- Container Orchestration: A container orchestrator does two things:
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Dynamically schedules container workloads, within a cluster of computers.
Provides a standardized application definition file (kube file, docker compose).&lt;/p&gt;
&lt;h3&gt;Docker&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;docker&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#docker&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;a href=&#34;//localhost:1313/docs/containers/docker&#34; &gt;Docker&lt;/a&gt; is within a sandboxed environment, it allows users to package an application with all of its dependencies into a standardized unit for development.Provides a layer of isolation from the host,where the container uses the host&amp;rsquo;s system resources like storage,memory and CPU.&lt;/p&gt;
&lt;p&gt;Architecture
- Docker Engine
- Docker Client
- Docker Registry&lt;/p&gt;
&lt;p&gt;Docker commands&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- `docker pull`: pulls the image from the registry server
- `docker images`: displays all the images present locally
- `docker ps -a`: list of containers currently running and terminated
- `docker run`: creates a new container from the image provided
- `docker exec`: runs a new command within the container,example bash prompt
- `docker stop`: stop the existing docker container
- `docker rm`: delete the docker container without any traces on local
- `docker rmi`: delete the container image locally
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href=&#34;//localhost:1313/docs/containers/docker&#34; &gt;Detailed explanation&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>2024-03-19</title>
      <link>//localhost:1313/wily/2024/mar-2024/20240319/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/wily/2024/mar-2024/20240319/</guid>
      <description>
        
        
        &lt;h3&gt;docker logs&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;docker-logs&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#docker-logs&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;`docker logs &lt;container-name&gt;, displays the logs of the container.&lt;/p&gt;
&lt;h3&gt;docker kill vs docker stop&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;docker-kill-vs-docker-stop&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#docker-kill-vs-docker-stop&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Container doesn&amp;rsquo;t stop for a &lt;code&gt;SIGTERM&lt;/code&gt; signal sent by a stop command, to terminate the process stop follows the &lt;code&gt;SIGTERM&lt;/code&gt; with a &lt;code&gt;SIGKILL&lt;/code&gt; after a grace period, instead it is faster to use &lt;code&gt;docker kill&lt;/code&gt; which terminates the container immediately.&lt;/p&gt;
&lt;h3&gt;docker search&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;docker-search&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#docker-search&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;To search for images within the registery server i.e here Docker Hub we can use the command &lt;code&gt;docker search &amp;lt;container-name&amp;gt;&lt;/code&gt; say for example, &lt;code&gt;docker search debian&lt;/code&gt; will list out the images with the repository owner and official status.&lt;/p&gt;
&lt;h3&gt;docker prune&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;docker-prune&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#docker-prune&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;prune command deletes all the unused and stopped containers,unused build cache,unused images from the host system,below command demonstrates the examples of the &lt;code&gt;docker prune&lt;/code&gt; command.&lt;/p&gt;
&lt;h3&gt;docker build&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;docker-build&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#docker-build&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;code&gt;docker build&lt;/code&gt; command builds docker images from a Dockerfile, which is a file that contains all the commands a user could call from the terminal.Docker builds images by reading instructions in Dockerfile.&lt;/p&gt;
&lt;p&gt;A docker instruction has two components: &lt;code&gt;INSTRUCTION&lt;/code&gt; and &lt;code&gt;ARGUMENT&lt;/code&gt;.&lt;/p&gt;
&lt;h4&gt;Docker Instructions&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;docker-instructions&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#docker-instructions&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;FROM&lt;/code&gt;: base image we want to start from&lt;/li&gt;
&lt;li&gt;&lt;code&gt;RUN&lt;/code&gt;: run commands during the image build process&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ENV&lt;/code&gt;: sets Environment variable during the build process and also while the container is created.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;COPY&lt;/code&gt;: command copies a a file or folder from the host to the docker image.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;EXPOSE&lt;/code&gt;: to expose a port on the docker image at runtime.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ADD&lt;/code&gt;: advanced version of COPY command,to copy files,tarballs to the docker image from the host,we can also define instructions to extract the tarball on the docker image.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;WORKDIR&lt;/code&gt;:  set the current working directory in the docker image.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;VOLUME&lt;/code&gt;: mount the volume to the docker container.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;USER&lt;/code&gt;:  sets the username and UUID when running the container,for setting the non-root user.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;LABEL&lt;/code&gt;: sets metadata information of Docker image.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CMD&lt;/code&gt;: executes a command within a running container, only one CMD command is allowed,if multiple are present only the last one is takes effect.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ENTRYPOINT&lt;/code&gt;: commands that will execute when the Docker container starts.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Defining Start conditions for container&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;defining-start-conditions-for-container&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#defining-start-conditions-for-container&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Let us consider a sample project where we run yt-dlp against a youtube link which downloads the video, let us build the Dockerfile by giving instructions.&lt;/p&gt;
&lt;p&gt;To construct a container image we should first select a base image,here &lt;code&gt;debian:bookworm&lt;/code&gt; as a base image to build yt-dlp image, the first line of the Dockerfile will be&lt;/p&gt;
&lt;div class=&#34;hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code&#34;&gt;
  

&lt;div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;FROM debian:bookworm&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0&#34;&gt;
  &lt;button
    class=&#34;hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50&#34;
    title=&#34;Copy code&#34;
  &gt;
    &lt;div class=&#34;copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
    &lt;div class=&#34;success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
  &lt;/button&gt;
&lt;/div&gt;

  
&lt;/div&gt;
&lt;p&gt;To get the binary of yt-dlp, we need curl and to run the &lt;code&gt;yt-dlp&lt;/code&gt; we need &lt;code&gt;python3&lt;/code&gt; so these two packages has to be installed before running the binary,so the Dockerfile with additions will be&lt;/p&gt;
&lt;div class=&#34;hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code&#34;&gt;
  

&lt;div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;FROM debian:bookworm
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;RUN apt update -y &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; apt install curl python3 -y&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0&#34;&gt;
  &lt;button
    class=&#34;hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50&#34;
    title=&#34;Copy code&#34;
  &gt;
    &lt;div class=&#34;copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
    &lt;div class=&#34;success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
  &lt;/button&gt;
&lt;/div&gt;

  
&lt;/div&gt;
&lt;p&gt;Fetching the yt-dlp binary from github and copying it to &lt;code&gt;/usr/local/bin&lt;/code&gt; and changing the permissions of the binary to executable of all.&lt;/p&gt;
&lt;div class=&#34;hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code&#34;&gt;
  

&lt;div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;FROM debian:bookworm
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;RUN apt update -y &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; apt install curl python3
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;RUN curl -L https://github.com/yt-dlp/yt-dlp/releases/latest/download/yt-dlp -o /usr/local/bin/yt-dlp
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;RUN chmod a+x /usr/local/bin/yt-dlp
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;CMD &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/usr/local/bin/yt-dlp&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0&#34;&gt;
  &lt;button
    class=&#34;hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50&#34;
    title=&#34;Copy code&#34;
  &gt;
    &lt;div class=&#34;copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
    &lt;div class=&#34;success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
  &lt;/button&gt;
&lt;/div&gt;

  
&lt;/div&gt;
&lt;p&gt;Upon creating the image and creation of container yt-dlp is to be launched.&lt;/p&gt;
&lt;div class=&#34;hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code&#34;&gt;
  

&lt;div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ docker run yt-dlp
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  Usage: yt-dlp &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;OPTIONS&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; URL &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;URL...&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  yt-dlp: error: You must provide at least one URL.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  Type yt-dlp --help to see a list of all options.&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0&#34;&gt;
  &lt;button
    class=&#34;hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50&#34;
    title=&#34;Copy code&#34;
  &gt;
    &lt;div class=&#34;copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
    &lt;div class=&#34;success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
  &lt;/button&gt;
&lt;/div&gt;

  
&lt;/div&gt;
&lt;div class=&#34;hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code&#34;&gt;
  

&lt;div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ docker run yt-dlp https://www.youtube.com/watch?v&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;uTZSILGTskA
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  docker: Error response from daemon: failed to create task &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; container: failed to create shim task: OCI runtime create failed: runc create failed: unable to start container process: exec: &lt;span class=&#34;s2&#34;&gt;&amp;#34;https://www.youtube.com/watch?v=uTZSILGTskA&amp;#34;&lt;/span&gt;: stat https://www.youtube.com/watch?v&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;uTZSILGTskA: no such file or directory: unknown.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  ERRO&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;0000&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; error waiting &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; container: context canceled&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0&#34;&gt;
  &lt;button
    class=&#34;hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50&#34;
    title=&#34;Copy code&#34;
  &gt;
    &lt;div class=&#34;copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
    &lt;div class=&#34;success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
  &lt;/button&gt;
&lt;/div&gt;

  
&lt;/div&gt;
&lt;p&gt;According to the above error the youtube link should be taken as an argument to the binary yt-dlp, but here the yt-dlp is executing as a command,updating the CMD TO ENTRYPOINT&lt;/p&gt;
&lt;div class=&#34;hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code&#34;&gt;
  

&lt;div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;FROM ubuntu:22.04
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;WORKDIR /mydir
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;RUN apt-get update &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; apt-get install -y curl python3
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;RUN curl -L https://github.com/yt-dlp/yt-dlp/releases/latest/download/yt-dlp -o /usr/local/bin/yt-dlp
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;RUN chmod a+x /usr/local/bin/yt-dlp
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Replacing CMD with ENTRYPOINT&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ENTRYPOINT &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/usr/local/bin/yt-dlp&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0&#34;&gt;
  &lt;button
    class=&#34;hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50&#34;
    title=&#34;Copy code&#34;
  &gt;
    &lt;div class=&#34;copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
    &lt;div class=&#34;success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
  &lt;/button&gt;
&lt;/div&gt;

  
&lt;/div&gt;
&lt;div class=&#34;hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code&#34;&gt;
  

&lt;div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ docker run yt-dlp https://www.youtube.com/watch?v&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;DptFY_MszQs
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;youtube&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; Extracting URL: https://www.youtube.com/watch?v&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;DptFY_MszQs
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;youtube&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; DptFY_MszQs: Downloading webpage
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;youtube&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; DptFY_MszQs: Downloading ios player API JSON
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;youtube&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; DptFY_MszQs: Downloading android player API JSON
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;youtube&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; DptFY_MszQs: Downloading player 9bb09009
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;youtube&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; DptFY_MszQs: Downloading m3u8 information
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;info&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; DptFY_MszQs: Downloading &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; format&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;s&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;: &lt;span class=&#34;m&#34;&gt;22&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;download&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; Destination: Welcome to Kumpula campus! ï½œ University of Helsinki &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;DptFY_MszQs&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;.mp4
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;download&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; 100% of   29.92MiB in 00:00:04 at 7.10MiB/s&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0&#34;&gt;
  &lt;button
    class=&#34;hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50&#34;
    title=&#34;Copy code&#34;
  &gt;
    &lt;div class=&#34;copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
    &lt;div class=&#34;success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
  &lt;/button&gt;
&lt;/div&gt;

  
&lt;/div&gt;
&lt;p&gt;Now when the container is run when passed the youtube link as argument the video is downloaded, but it is stored onto the container,here comes the concept of volumes where data is stored.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>2024-03-20</title>
      <link>//localhost:1313/wily/2024/mar-2024/20240320/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/wily/2024/mar-2024/20240320/</guid>
      <description>
        
        
        &lt;h4&gt;Alpine Linux&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;alpine-linux&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#alpine-linux&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;To install a package: &lt;code&gt;apk add &amp;lt;packagename&amp;gt;&lt;/code&gt;, for example to install maven and openjdk17 we use the command &lt;code&gt;apk add openjdk17 maven&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;Dockerize Spring Boot Application.&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;dockerize-spring-boot-application&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#dockerize-spring-boot-application&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;div class=&#34;hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code&#34;&gt;
  

&lt;pre&gt;&lt;code&gt;FROM debian:bookworm
RUN apt update -y &amp;amp;&amp;amp; apt install default-jdk maven git -y
RUN git clone https://gitlab.com/vinay-keshava/spring-boot-hello-world.git
WORKDIR /spring-boot-hello-world
EXPOSE 9328
RUN mvn clean install -DskipTests
ENTRYPOINT [&amp;#34;java&amp;#34;,&amp;#34;-jar&amp;#34;,&amp;#34;target/demo-0.0.1.jar&amp;#34;]&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0&#34;&gt;
  &lt;button
    class=&#34;hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50&#34;
    title=&#34;Copy code&#34;
  &gt;
    &lt;div class=&#34;copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
    &lt;div class=&#34;success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
  &lt;/button&gt;
&lt;/div&gt;

  
&lt;/div&gt;
&lt;p&gt;Selecting &lt;code&gt;debian:bookworm&lt;/code&gt; as base image,installing jdk and maven packages, along with this exposing the port &lt;code&gt;9238&lt;/code&gt; and building the project.
After successfull build of this docker image to create a container use the command &lt;code&gt;docker run -dit -p 8080:9328 &amp;lt;imagename&amp;gt;&lt;/code&gt; where 9328 port number is being binded to port 8080 on the host&lt;/p&gt;
&lt;div class=&#34;hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code&#34;&gt;
  

&lt;pre&gt;&lt;code&gt;FROM mysql:8.0.36-bookworm
ENV MYSQL_PASSWORD=root\
    MYSQL_DATABASE=customersurvey\
    MYSQL_ALLOW_EMPTY_PASSWORD=false\
    MYSQL_ALLOW_RANDOME_PASSWORD=false
RUN apt update -y &amp;amp;&amp;amp; apt install git maven default-jdk -y
RUN git clone https://gitlab.com/vinay-keshava/customer-survey.git
WORKDIR /customer-survey
EXPOSE 8088
RUN mvn clean install -DskipTests
ENTRYPOINT [&amp;#34;java&amp;#34;,&amp;#34;-jar&amp;#34;,&amp;#34;target/CustomerSurvey-0.0.1.jar&amp;#34;]&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0&#34;&gt;
  &lt;button
    class=&#34;hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50&#34;
    title=&#34;Copy code&#34;
  &gt;
    &lt;div class=&#34;copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
    &lt;div class=&#34;success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
  &lt;/button&gt;
&lt;/div&gt;

  
&lt;/div&gt;
&lt;p&gt;Fetches the &lt;code&gt;mysql&lt;/code&gt; image from the docker hub and setting &lt;code&gt;ENV&lt;/code&gt; environment variables, and installing &lt;code&gt;maven&lt;/code&gt; and &lt;code&gt;default-jdk&lt;/code&gt; packages and then changing the working directory to the project which is cloned from gitlab, running &lt;code&gt;mvn install&lt;/code&gt; command and upon starting the container running the jar file of the project&lt;/p&gt;
&lt;h3&gt;Docker Volumes&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;docker-volumes&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#docker-volumes&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;What if you want to store information outside the docker container, that can be used as shared storage for other containers. Docker volumes are mounted to filesystem paths onto the container, where the actual data is stored on the host.With the help of drivers data is written in different services.&lt;/p&gt;
&lt;p&gt;Example to pull a &lt;code&gt;nginx&lt;/code&gt; docker image and syncing file and directories across containers and docker volume.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;To create a volume:
&lt;code&gt;docker volume create nginx-data&lt;/code&gt;, where nginx-data is the volume name,where the volume is created at &lt;code&gt;/var/lib/docker/volumes/nginx-data/_data&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;docker inspect nginx-data&lt;/code&gt; displays information at what date the volume was created,mountpoint,drivers,etc.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;$ docker run -itd -v /var/lib/docker/volumes/nginx-data/_data/:/var/www/html nginx&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;what ever data in &lt;code&gt;/var/www/html&lt;/code&gt; inside the container is present is synced to the host &lt;code&gt;nginx-data&lt;/code&gt;.
To verify the working of docker volume, [inside the container] change to the directory &lt;code&gt;/var/www/html&lt;/code&gt; and create a sample file like &lt;code&gt;hello_world.java&lt;/code&gt; and [on the host] when the files are listed under &lt;code&gt;/var/lib/docker/volumes/nginx-data/_data&lt;/code&gt;  hello_world.java shows, there by verifying the shared volume.&lt;/p&gt;
&lt;h3&gt;Docker Ports&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;docker-ports&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#docker-ports&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;To expose a particular ports we use the &lt;code&gt;-p&lt;/code&gt; flag and in Dockerfile we use the keyword &lt;code&gt;EXPOSE &amp;lt;PORTNUMBER&amp;gt;&lt;/code&gt; to expose a particular port&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;docker login&lt;/code&gt; command to login to hub.docker.com to push container images.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;GnuPG import keyword&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;gnupg-import-keyword&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#gnupg-import-keyword&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;To import the private GnuPG key we use &lt;code&gt;gpg --import private.asc&lt;/code&gt; and change the level of trust by editing the key and updating the trust level to &lt;code&gt;ultimate&lt;/code&gt;.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>2024-03-26</title>
      <link>//localhost:1313/wily/2024/mar-2024/20240326/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/wily/2024/mar-2024/20240326/</guid>
      <description>
        
        
        &lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;hostname&lt;/code&gt; : set and view hostname of the system&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-i&lt;/code&gt; flag prints ip address of the hostname network&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Docker Swarm&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;doker swarm init --advertise-addr &amp;lt;ip-address&amp;gt;&lt;/code&gt;: to initialize swarm mode.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker node ls&lt;/code&gt;: displays all members including manager and worker nodes.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Pravserver debugging the issue for inactive accounts, which are inactive for more than 28days.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://codeberg.org/prav/pravserver/src/branch/master/src/main/java/im/quicksy/server/configuration/Configuration.java#L54&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://codeberg.org/prav/pravserver/src/branch/master/src/main/java/im/quicksy/server/configuration/Configuration.java#L54&lt;/a&gt; : line 54 shows the limit set for inactive accounts&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://codeberg.org/prav/pravserver/src/branch/master/src/main/java/im/quicksy/server/controller/PasswordController.java#L122&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://codeberg.org/prav/pravserver/src/branch/master/src/main/java/im/quicksy/server/controller/PasswordController.java#L122&lt;/a&gt; (Line 122-142) if the account is inactive for more than 28days unregister and register account through the EjabberdApi.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>2024-03-27</title>
      <link>//localhost:1313/wily/2024/mar-2024/2024028/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/wily/2024/mar-2024/2024028/</guid>
      <description>
        
        
        &lt;ul&gt;
&lt;li&gt;Docker Swarm&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;Rolling Updates&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;To reduce the downtime of an application and also to introduce minimal downtime for rolling updates while docker swarm.
Here lets us take an example image of &lt;code&gt;alpine:3.17.7&lt;/code&gt; and with the command to &lt;code&gt;ping google.com&lt;/code&gt;, to demonstrate the rolling updates,let us update the image to &lt;code&gt;alpine:3.18.6&lt;/code&gt; while the container is running.&lt;/p&gt;
&lt;p&gt;Pre-requisites are the enable the docker swarm mode, and add a worker node to the cluster.
&lt;code&gt;docker service update --image alpine:3.18.6 helloworld&lt;/code&gt;&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Rollback Updates&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;To continue from the above rolling updates, if many such cases we would want to rollback to the previous state of the service, due to a bug etc, in our example we would want to rollback to our previous state which is from &lt;code&gt;alpine:3.18.6&lt;/code&gt; to &lt;code&gt;alpine:3.17.7&lt;/code&gt; we use the command &lt;code&gt;docker service rollback &amp;lt;service-name&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code&#34;&gt;
  

&lt;div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;node1&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;local&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; root@192.168.0.12 ~
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ docker service rollback helloworld
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;helloworld&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0&#34;&gt;
  &lt;button
    class=&#34;hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50&#34;
    title=&#34;Copy code&#34;
  &gt;
    &lt;div class=&#34;copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
    &lt;div class=&#34;success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
  &lt;/button&gt;
&lt;/div&gt;

  
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;API Architecture&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;SOAP,REST,GraphQL and gRPC are most popular API architecture, in this digitizing world where large amounts of data is being transferred&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;REST
REST stands for REpresentational State Transfer, is a widely used architectural style for building web API&amp;rsquo;s. REST API&amp;rsquo;s uses HTTP requests to retreive and manipulate data. Key characteristics of REST include:&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Resource Based: REST API&amp;rsquo;s are based on concept of resources,which are exposed through URL&amp;rsquo;s.
Stateless: REST API does not maintain the state between two requests,hence stateless.
CRUD: REST API&amp;rsquo;s support Create,Read,Update and Delete operations for manipulating data.
Flexible: REST API&amp;rsquo;s are flexible,used for many purposes in general.&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;GraphQL
GraphQL is query language for API&amp;rsquo;s, which is more flexible than REST. Allows clients to specify exactly what data they need, which reduces the data transferred over network.Key characteristics:&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Strongly Typed: clients and servers agree on the structure of the data exchanged.
Query Based: clients specify exactly what they need and receives only that data.
Single Endpoint: GraphQL has single endpoint,which simplifies client-server communications
Schema driven: API schema defines the type of data available and operations that can be performed on that data.&lt;/p&gt;
&lt;p&gt;GraphQL uses POST HTTP method for all the operations be it GET,POST etc it uses POST HTTP method.&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;gRPC
gRPC Remote Procedure Call open source framework developed by Google for building Remote Procedure Calls API&amp;rsquo;s.Unlike traditional API&amp;rsquo;s that rely on HTTP methods,gRPC uses more efficient and lightweight Protocol Buffers as the datainterchange format and it supports multiple programming languages.
Using protocol buffers,faster and efficient communication is achieved.gRPC supports bidirectional streaming real-time  communication between clients and servers.&lt;/li&gt;
&lt;/ol&gt;

      </description>
    </item>
    
    <item>
      <title>2024-03-27</title>
      <link>//localhost:1313/wily/2024/mar-2024/20240327/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/wily/2024/mar-2024/20240327/</guid>
      <description>
        
        
        &lt;ul&gt;
&lt;li&gt;Docker Swarm
&lt;ul&gt;
&lt;li&gt;Deploying a service : &lt;code&gt;docker service create --replicas 1 --name helloworld alpine ping google.com&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Verify and Inspect service: &lt;code&gt;docker service inspect --pretty helloworld&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Scale Service: &lt;code&gt;docker service scale helloworld=5&lt;/code&gt; to increase the number of replicas.&lt;/li&gt;
&lt;li&gt;Delete a service: &lt;code&gt;docker service rm helloworld&lt;/code&gt; deletes the service.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
  </channel>
</rss>
